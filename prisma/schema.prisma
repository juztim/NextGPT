// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  messages            Message[]
  conversationFolders ConversationFolder[]
  Conversation        Conversation[]
  Prompt              Prompt[]
  Character           Character[]
  apiKey              String?
  Settings            Settings[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ConversationFolder {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  conversations Conversation[]

  @@index([userId])
}

model Conversation {
  id        String              @id @default(cuid())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  messages  Message[]
  name      String?             @db.Text
  folder    ConversationFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  folderId  String?
  user      User                @relation(fields: [userId], references: [id])
  userId    String
  favored   Boolean             @default(false)

  @@index([folderId])
  @@index([userId])
}

model Message {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  text           String       @db.Text
  author         User?        @relation(fields: [authorId], references: [id])
  authorId       String?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  @@index([authorId])
  @@index([conversationId])
}

model Prompt {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String   @db.Text
  description  String?  @db.Text
  instructions String   @db.Text
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?

  @@index([userId])
}

model Character {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  description  String?  @db.Text
  instructions String?  @db.Text
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?

  @@index([userId])
}

model Settings {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  temperature  Float    @default(0.5)
  writingStyle String   @default("casual")
  tone         String   @default("friendly")
  format       String   @default("short")
  outputLanguage String @default("english")
  initialInstructions String? @db.Text

  @@index([userId])
}
