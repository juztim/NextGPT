generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  apiKey              String?
  premium             Boolean              @default(false)
  stripeCustomerId    String?
  accounts            Account[]
  sessions            Session[]
  messages            Message[]
  conversationFolders ConversationFolder[]
  Conversation        Conversation[]
  Prompt              Prompt[]
  Character           Character[]
  Settings            Settings[]
  PromptJoin          PromptJoin[]
  CharacterJoin       CharacterJoin[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ConversationFolder {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  conversations Conversation[]

  @@index([userId])
}

model Conversation {
  id        String              @id @default(cuid())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  folderId  String?
  userId    String
  name      String?             @db.Text
  favored   Boolean             @default(false)
  messages  Message[]
  folder    ConversationFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  user      User                @relation(fields: [userId], references: [id])

  @@index([folderId])
  @@index([userId])
}

model Message {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  text           String       @db.Text
  authorId       String?
  conversationId String
  author         User?        @relation(fields: [authorId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([conversationId])
}

model Prompt {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String?
  description  String?      @db.Text
  instructions String       @db.Text
  name         String       @db.Text
  category     String?      @db.Text
  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  PromptJoin   PromptJoin[]

  @@index([userId])
}

model Character {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  description   String?         @db.Text
  instructions  String?         @db.Text
  userId        String?
  category      String?         @db.Text
  user          User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  CharacterJoin CharacterJoin[]

  @@index([userId])
}

model Settings {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String
  temperature         Float    @default(0.5)
  topP                Float    @default(0.9)
  maxLength           Float?
  presencePenalty     Float    @default(0)
  frequencyPenalty    Float    @default(0)
  writingStyle        String   @default("casual")
  tone                String   @default("friendly")
  format              String   @default("short")
  outputLanguage      String   @default("english")
  initialInstructions String?  @db.Text
  showWordCount       Boolean  @default(true)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PromptJoin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  promptId  String
  userId    String
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([promptId])
  @@index([userId])
}

model CharacterJoin {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  characterId String
  userId      String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([characterId])
  @@index([userId])
}
